<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>ComplexMethod:InMemoryUniquenessCheckerImpl.kt$InMemoryUniquenessCheckerImpl$@Synchronized override fun processRequests( requests: List&lt;UniquenessCheckRequest&gt; ) : List&lt;UniquenessCheckResponse&gt;</ID>
    <ID>SpreadOperator:UniquenessCheckerImplTests.kt$UniquenessCheckerImplTests.Miscellaneous$( newRequestBuilder() .setInputStates(listOf( generateUnspentStates(1).single(), doubleSpendAttemptStates[0], doubleSpendAttemptStates[1], doubleSpendAttemptStates[2] )) .setTimeWindowLowerBound(currentTime()) .build(), newRequestBuilder() .setInputStates(listOf( generateUnspentStates(1).single(), doubleSpendAttemptStates[0], doubleSpendAttemptStates[1] )) .setReferenceStates( listOf(doubleSpendAttemptStates[2])) .build(), newRequestBuilder() .setReferenceStates( listOf(doubleSpendAttemptStates[2])) .build(), newRequestBuilder() .setInputStates( generateUnspentStates(10) + priorSpentStates[0] + priorSpentStates[1]) .build(), retryableFailedRequest, retryableSuccessfulRequest, newRequestBuilder() .setTimeWindowUpperBound(timeWindowUpperBound) .build(), *Array(3) { newRequestBuilder() .setInputStates(generateUnspentStates(3)) .setReferenceStates(generateUnspentStates(4)) .build()} )</ID>
    <ID>WildcardImport:InMemoryUniquenessCheckerImpl.kt$import net.corda.data.uniqueness.*</ID>
    <ID>WildcardImport:UniquenessCheckerImplTests.kt$import java.time.*</ID>
    <ID>WildcardImport:UniquenessCheckerImplTests.kt$import net.corda.data.uniqueness.*</ID>
    <ID>WildcardImport:UniquenessCheckerImplTests.kt$import org.junit.jupiter.api.Assertions.*</ID>
  </CurrentIssues>
</SmellBaseline>
