import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import static org.gradle.api.JavaVersion.VERSION_11
import io.gitlab.arturbosch.detekt.DetektPlugin

buildscript {
    repositories {
        maven {
            url "$artifactoryContextUrl/corda-releases"
        }
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.plugin.allopen' apply false
    id 'org.jetbrains.kotlin.plugin.noarg' apply false
    id 'io.gitlab.arturbosch.detekt' apply false
    id 'idea'
    id 'application'
    id 'com.jfrog.artifactory'
    id 'maven-publish'
    id 'org.ajoberstar.grgit' version '4.0.2'
}

wrapper {
    gradleVersion = '6.8.1'
    distributionType = Wrapper.DistributionType.BIN
}

def releaseType = System.getenv("RELEASE_TYPE") ?: "SNAPSHOT"
def gitHeadCommitHash = grgit.head().id
def gitBuildId = "${grgit.head().dateTime.toInstant().toEpochMilli()}-${grgit.head().abbreviatedId}"

// If we are not given an explicit build type, we assume a "snapshot" development build. The
// snapshotLabel property can be used to allow developers to distinctly tag their own builds,
// which may be useful for retrieval from Artifactory.
def flowworkerVersion
def artifactoryRepo

logger.lifecycle("Release type: {}", releaseType)

switch (releaseType) {
    case "SNAPSHOT":
        // Snapshot build.  The snapshotLabel property can be used to allow developers to
        // distinctly tag their own builds, which may be useful for retrieval from Artifactory.
        flowworkerVersion = project.hasProperty("snapshotLabel") ?
                "$flowworkerMajorMinorVersion.0-${project.property("snapshotLabel")}-SNAPSHOT" :
                "$flowworkerMajorMinorVersion.0-SNAPSHOT"
        artifactoryRepo = "corda-ent-maven-dev"
        break
    case "ALPHA":
        // CI builds of development branches
        flowworkerVersion = "$flowworkerMajorMinorVersion.$gitBuildId-alpha"
        artifactoryRepo = "corda-ent-maven-unstable"
        break
    case "BETA":
        // CI builds of PRs
        flowworkerVersion = "$flowworkerMajorMinorVersion.$gitBuildId-beta"
        artifactoryRepo = "corda-ent-maven-unstable"
        break
    case "CD-RELEASE":
        // Continuous delivery release builds.
        flowworkerVersion = "$flowworkerMajorMinorVersion.$gitBuildId"
        // CD release build start out as unstable, and are moved to stable using build promotion
        // via Jenkins
        artifactoryRepo = "corda-ent-maven-unstable"
        break
    default:
        throw new InvalidUserDataException("Invalid build type provided. Must be one of " +
                "SNAPSHOT, ALPHA, BETA or CD-RELEASE.")
}

logger.lifecycle("Building Flowworker version: {}", flowworkerVersion)

// You can define this property in ~/.gradle/gradle.properties on your dev box.
if (! project.hasProperty('cordaArtifactoryUsername') || ext.cordaArtifactoryUsername != null) {
    ext.cordaArtifactoryUsername = System.getenv('CORDA_ARTIFACTORY_USERNAME')
            ?: System.getProperty('corda.artifactory.username')
}

// You can define this property in ~/.gradle/gradle.properties on your dev box.
if (! project.hasProperty('cordaArtifactoryPassword') || ext.cordaArtifactoryPassword == null) {
    ext.cordaArtifactoryPassword = System.getenv('CORDA_ARTIFACTORY_PASSWORD')
            ?: System.getProperty('corda.artifactory.password')
}

artifactory {
    publish {
        contextUrl = artifactoryContextUrl
        repository {
            repoKey = artifactoryRepo
            username = cordaArtifactoryUsername
            password = cordaArtifactoryPassword
            maven = true
        }
        defaults {
            publications(project.name)
            properties = ['release.type': releaseType, 'source.revision': gitHeadCommitHash]
        }
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'idea'
    apply plugin: 'kotlin-allopen'
    apply plugin: 'kotlin-noarg'
    apply plugin: DetektPlugin

    detekt {
        baseline = file("$projectDir/detekt-baseline.xml")
        config.setFrom(files("$rootDir/detekt-config.yml"))
        parallel = true
        reports {
            xml {
                enabled = true
                destination = file("$projectDir/build/detekt-report.xml")
            }
            html {
                enabled = false
            }
            txt {
                enabled = false
            }
        }
    }

    dependencies {
        detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$detektPluginVersion"

        api "org.osgi:osgi.annotation:$osgiVersion"
        api "org.osgi:osgi.cmpn:$osgiVersion"
        api "org.osgi:osgi.core:$osgiVersion"
    }
}

allprojects {
    group 'net.corda'

    version flowworkerVersion

    tasks.withType(JavaCompile) {
        sourceCompatibility = VERSION_11
        targetCompatibility = VERSION_11
        options.encoding = 'UTF-8'
        options.compilerArgs += '-XDenableSunApiLintControl'
    }

    tasks.withType(KotlinCompile) {
        kotlinOptions {
            languageVersion = '1.4'
            apiVersion = '1.4'
            jvmTarget = VERSION_11
            javaParameters = true   // Useful for reflection.
            freeCompilerArgs += [
                    '-Xjvm-default=all',
                    // Prevent Kotlin from warning about kotlin.* classes inside the OSGi bundle.
                    "-Xskip-runtime-version-check",
                    "-java-parameters"
            ]
        }
    }

    repositories {
        //needed for kotlin osgi bundles generated by us
        maven {
            url = "$artifactoryContextUrl/corda-dependencies"
        }
        maven {
            url = "https://kotlin.bintray.com/kotlinx"
        }
        mavenCentral()
        //TODO remove this when we can as its only needed for kotlinx-html-jvm
        jcenter()
    }

    sourceSets {
        integrationTest {
            kotlin {
                srcDirs = [ 'src/integration-test/kotlin' ]
            }
            resources {
                srcDirs = [ 'src/integration-test/resources' ]
            }
        }
    }

    configurations {
        integrationTestApi.extendsFrom testApi
        integrationTestCompileOnly.extendsFrom testCompileOnly
        integrationTestImplementation.extendsFrom testImplementation
    }

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-osgi-bundle:$kotlinVersion"
        implementation "net.corda.kotlin:kotlin-stdlib-jdk8-osgi:$kotlinVersion"
        implementation "org.slf4j:slf4j-api:$slf4jVersion"

        // Test utilities
        testImplementation "org.junit.jupiter:junit-jupiter-api:$junit5Version"
        testImplementation "org.assertj:assertj-core:$assertjVersion"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit5Version"
    }
}
