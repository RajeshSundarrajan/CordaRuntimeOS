import static org.gradle.api.JavaVersion.VERSION_11

buildscript {
    configurations.classpath {
        resolutionStrategy {
            // FORCE Gradle to use latest dynamic-version plugins.
            cacheDynamicVersionsFor 0, 'seconds'
        }
    }
}

plugins {
    id 'org.jetbrains.kotlin.plugin.allopen' apply false
    id 'org.jetbrains.kotlin.plugin.jpa' apply false
    id 'biz.aQute.bnd.builder' apply false
    id 'idea'
    id 'net.corda.cordapp.cordapp-configuration'
    id 'com.r3.internal.gradle.plugins.r3ArtifactoryPublish'
    id 'maven-publish'
    id 'jacoco'
    id 'com.github.ben-manes.versions' // discover possible dependency version upgrades
}

wrapper {
    gradleVersion = '7.3.2'
    distributionType = Wrapper.DistributionType.BIN
}

def javaVersion = VERSION_11

allprojects {
    if (!project.hasProperty('cordaArtifactoryUsername')) {
        ext.cordaArtifactoryUsername = System.getenv('CORDA_ARTIFACTORY_USERNAME')
    }

    if (!project.hasProperty('cordaArtifactoryPassword')) {
        ext.cordaArtifactoryPassword = System.getenv('CORDA_ARTIFACTORY_PASSWORD')
    }

    repositories {
        // TODO: you really need to use the cache, otherwise no complaining when upstream repos throttle us!
        // It would make sense to follow the template!

        // Listed the mavenLocal repository first in case people are doing a local publication of an upstream
        //  module (e.g in corda-api repo).
        //  This would ensure that the local copy is picked up if it is available.
        mavenLocal()

        //needed for kotlin osgi bundles generated by us
        maven {
            url = "$artifactoryContextUrl/corda-dependencies"
        }
        //needed for C5 binaries
        maven {
            url = "$artifactoryContextUrl/corda-os-maven"
            credentials {
                username = cordaArtifactoryUsername
                password = cordaArtifactoryPassword
            }
        }

        def cordaUseCache = System.getenv("CORDA_USE_CACHE")
        if (cordaUseCache != null) {
            maven {
                url = "$artifactoryContextUrl/$cordaUseCache"
                name = "R3 Maven remote repositories"
                authentication {
                    basic(BasicAuthentication)
                }
                credentials {
                    username = findProperty('cordaArtifactoryUsername') ?: System.getenv('CORDA_ARTIFACTORY_USERNAME')
                    password = findProperty('cordaArtifactoryPassword') ?: System.getenv('CORDA_ARTIFACTORY_PASSWORD')
                }
            }
        } else {
            mavenCentral()

            exclusiveContent {
                forRepository {
                    maven {
                        url 'https://repository.mulesoft.org/nexus/content/repositories/public'
                    }
                }
                filter {
                    includeGroup 'org.mule.distributions'
                    includeGroup 'antlr'
                }
            }

            // temporarily for the Liquibase patch
            // TODO: REMOVE when patched merged https://r3-cev.atlassian.net/browse/CORE-2723
            exclusiveContent {
                forRepository {
                    maven {
                        url "$artifactoryContextUrl/corda-dependencies-dev"
                    }
                }
                filter {
                    includeGroup 'org.liquibase'
                }
            }
        }
    }
}

logger.quiet("********************** CORDA FLOW WORKER BUILD **********************")
if (JavaVersion.current() != javaVersion) {
    throw new GradleException("The java version used ${JavaVersion.current()} is not the expected version ${javaVersion}.")
}
logger.quiet("SDK version: {}", JavaVersion.current())
logger.quiet("JAVA HOME {}", System.getProperty("java.home"))

def cordaVersion = "$cordaProductVersion.$cordaRuntimeRevision"
if (System.getenv("RELEASE_VERSION")?.trim()) {
    version = System.getenv("RELEASE_VERSION")
} else {
    def versionSuffix = '-SNAPSHOT'
    if(project.hasProperty('overridePublishVersionSuffix')) {
        versionSuffix = project.property('overridePublishVersionSuffix')
    } else if (System.getenv('VERSION_SUFFIX')) {
        versionSuffix = System.getenv('VERSION_SUFFIX')
    }
    version = "$cordaVersion$versionSuffix"
}
logger.quiet("Corda runtime OS release version: {}", version)
logger.quiet("Corda API dependency version spec: {}", cordaApiVersion)
logger.quiet("Old Corda dependencies version spec: {}", cordaVersion)
//logger.quiet("Release Type: {}", releaseType)
if ("${compositeBuild}".toBoolean() && file("${cordaApiLocation}").exists()) {
    logger.quiet( "Corda-Api project exists on disk in the expected location and Gradle composite build is enabled, corda-api binaries will be substituted with source code")
}

subprojects {
    buildscript {
        configurations.classpath {
            // FORCE Gradle to use latest dynamic-version plugins.
            resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
        }
    }

    apply plugin: 'idea'
    apply plugin: 'kotlin-allopen'
    apply plugin: 'kotlin-jpa'
    apply plugin: 'jacoco'

    version rootProject.version
    group 'net.corda'

    idea{
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }

    allOpen {
        annotations(
            "javax.persistence.Entity",
            "javax.persistence.Embeddable",
            "javax.persistence.MappedSuperclass"
        )
    }
}

// report updatable dependencies: gradle dependencyUpdates
def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}
tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }
}
