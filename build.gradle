import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import static org.gradle.api.JavaVersion.VERSION_11
import io.gitlab.arturbosch.detekt.DetektPlugin

buildscript {
    repositories {
        mavenLocal()
        maven {
            url "$artifactoryContextUrl/corda-releases"
        }
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.plugin.allopen' apply false
    id 'org.jetbrains.kotlin.plugin.noarg' apply false
    id 'io.gitlab.arturbosch.detekt' apply false
    id 'idea'
    id 'application'
    id 'com.jfrog.artifactory'
    id 'maven-publish'
    id 'org.ajoberstar.grgit' version '1.6.0'
    id 'pl.allegro.tech.build.axion-release' version '1.10.0'
}



wrapper {
    gradleVersion = '6.8.1'
    distributionType = Wrapper.DistributionType.BIN
}


artifactory {
    publish {
        contextUrl = artifactoryContextUrl
        repository {
            repoKey = System.getenv('FLOWWORKER_PUBLISH_REPOSITORY_KEY') ?: 'corda-os-maven-dev'
            username = System.getenv('CORDA_ARTIFACTORY_USERNAME')
            password = System.getenv('CORDA_ARTIFACTORY_PASSWORD')
            maven = true
        }
        defaults {
            publishPom = true
            publishArtifacts = true
            publishBuildInfo = true
        }
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'idea'
    apply plugin: 'kotlin-allopen'
    apply plugin: 'kotlin-noarg'
    apply plugin: DetektPlugin
    apply plugin: 'pl.allegro.tech.build.axion-release'


    detekt {
        baseline = file("$projectDir/detekt-baseline.xml")
        config.setFrom(files("$rootDir/detekt-config.yml"))
        parallel = true
        reports {
            xml {
                enabled = true
                destination = file("$projectDir/build/detekt-report.xml")
            }
            html {
                enabled = false
            }
            txt {
                enabled = false
            }
        }
    }


    scmVersion {

        /*monorepos {
            projectDirs = project.rootProject.subprojects.collect({p -> p.name})
        }*/

        checks {
            uncommittedChanges = false
            aheadOfRemote = false
            snapshotDependencies = false
        }

        repository {
            type = 'git'
            directory = project.rootProject.file('./') // repository location
            remote = 'privaterepo'
        }

        tag {
            prefix = getTagName(project.name)
        }

        //versionCreator { version, position -> version }
        branchVersionCreator = [ // use different creator per branch
                                 'release/.*': 'simple',
                                 '.*': 'versionWithBranch'
        ]
    }

    project.version = scmVersion.version

    dependencies {
        detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$detektPluginVersion"

        api "org.osgi:osgi.annotation:$osgiVersion"
        api "org.osgi:osgi.cmpn:$osgiVersion"
        api "org.osgi:osgi.core:$osgiVersion"
    }
}



allprojects {
    group 'net.corda'

    tasks.withType(JavaCompile) {
        sourceCompatibility = VERSION_11
        targetCompatibility = VERSION_11
        options.encoding = 'UTF-8'
        options.compilerArgs += '-XDenableSunApiLintControl'
    }

    tasks.withType(KotlinCompile) {
        kotlinOptions {
            languageVersion = '1.4'
            apiVersion = '1.4'
            jvmTarget = VERSION_11
            javaParameters = true   // Useful for reflection.
            freeCompilerArgs += [
                    '-Xjvm-default=all',
                    // Prevent Kotlin from warning about kotlin.* classes inside the OSGi bundle.
                    "-Xskip-runtime-version-check",
                    "-java-parameters"
            ]
        }
    }

    repositories {
        //needed for kotlin osgi bundles generated by us
        maven {
            url = "$artifactoryContextUrl/corda-dependencies"
        }
        maven {
            url = "https://kotlin.bintray.com/kotlinx"
        }
        mavenCentral()
        //TODO remove this when we can as its only needed for kotlinx-html-jvm
        jcenter()
        mavenLocal()
    }

    sourceSets {
        integrationTest {
            kotlin {
                srcDirs = [ 'src/integration-test/kotlin' ]
            }
            resources {
                srcDirs = [ 'src/integration-test/resources' ]
            }
        }
    }

    configurations {
        integrationTestApi.extendsFrom testApi
        integrationTestCompileOnly.extendsFrom testCompileOnly
        integrationTestImplementation.extendsFrom testImplementation
    }

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-osgi-bundle:$kotlinVersion"
        implementation "net.corda.kotlin:kotlin-stdlib-jdk8-osgi:$kotlinVersion"
        implementation "org.slf4j:slf4j-api:$slf4jVersion"

        // Test utilities
        testImplementation "org.junit.jupiter:junit-jupiter-api:$junit5Version"
        testImplementation "org.assertj:assertj-core:$assertjVersion"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit5Version"
    }
}

def getTagName(projectName) {
    def branch = getBranchName()

    if (!branch.contains("release/")) {
        return branch + "-" + projectName
    }

    return projectName
}

def getBranchName() {
    return  "working-example"
  //  return grgit.branch.getCurrent().name
}

/*
def getVersionNumber(version, position) {
    def time = new Date().time
    if (getBranchName().contains("release")) {
        return time + "-rc"
    } else {
        return position.shortRevision + "-alpha"
    }
}
*/
