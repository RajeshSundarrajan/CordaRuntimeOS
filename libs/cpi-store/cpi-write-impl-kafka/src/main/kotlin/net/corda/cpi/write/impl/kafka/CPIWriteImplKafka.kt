/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package net.corda.cpi.write.impl.kafka

import com.typesafe.config.Config
import net.corda.cpi.read.CPIRead
import net.corda.cpi.read.factory.CPIReadFactory
import net.corda.cpi.read.impl.kafka.CPIReadImplKafka.Companion.CPILIST_TOPICNAME
import net.corda.cpi.write.CPIWrite
import net.corda.messaging.api.publisher.Publisher
import net.corda.messaging.api.records.Record
import net.corda.packaging.Cpb


class CPIWriteImplKafka(private val publisher: Publisher, private val nodeConfig: Config, private val cpiReadFactory: CPIReadFactory): CPIWrite {

    @Volatile
    private var stopped = true
    private lateinit var cpiListCallbackHandle: AutoCloseable
    private lateinit var cpiRead: CPIRead

    override fun start() {
        if (stopped) {
            stopped = false
            val cpiRead = cpiReadFactory.createCPIRead(nodeConfig)
            cpiRead.start()
            cpiListCallbackHandle = cpiRead.registerCallback { changedKeys, currentSnapshot ->
                this.onUpdateCPIIdentifier(changedKeys, currentSnapshot)
            }
        }
    }

    override fun stop() {
        if (stopped) {
            stopped = true
            cpiListCallbackHandle.close()
            cpiRead.stop()
        }
    }

    override val isRunning: Boolean
        get() = !stopped

    private fun onUpdateCPIIdentifier(changedKeys: Set<Cpb.Identifier>, currentSnapshot: Map<Cpb.Identifier, Cpb.MetaData>) {
        val records = changedKeys.map { key -> Record(CPILIST_TOPICNAME, key, currentSnapshot[key] )}
        publisher.publish(records)
    }
}
