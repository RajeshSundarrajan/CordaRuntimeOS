plugins {
    id 'corda.publish'
    id 'corda.common-app'
    id 'net.corda.plugins.flask' apply false
    id 'net.corda.plugins.quasar-utils'
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compileOnly "org.osgi:osgi.annotation:$osgiVersion"
    compileOnly "org.osgi:osgi.cmpn:$osgiVersion"
    compileOnly "org.osgi:osgi.core:$osgiVersion"

    implementation "net.corda:corda-base:$cordaSandboxVersion"
    implementation "net.corda:corda-crypto-api:$cordaSandboxVersion"
    implementation "net.corda:corda-install:$cordaSandboxVersion"
    implementation "net.corda:corda-sandbox:$cordaSandboxVersion"
    implementation "net.corda:corda-packaging:$cordaSandboxVersion"
    implementation "org.apache.felix:org.apache.felix.configadmin:$felixConfigAdminVersion"

    implementation project(":libs:lifecycle")
    implementation project(":osgi-framework-api")

    runtimeOnly "org.apache.felix:org.apache.felix.scr:$felixScrVersion"
    runtimeOnly "org.osgi:org.osgi.util.function:$osgiUtilFunctionVersion"
    runtimeOnly "org.osgi:org.osgi.util.promise:$osgiUtilPromiseVersion"

    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit5Version"
}

description 'Test Sandbox'

project.tasks.register("flaskJar", net.corda.gradle.flask.FlaskJarTask) {
    archiveBaseName = "corda-flask-" + project.name
    destinationDirectory = new File(project.buildDir, "bin")
    Provider<RegularFile> quasarAgent = layout.file(provider { configurations.quasarAgent.singleFile })
    includeLibraries(project.tasks.named("appJar").map { it.outputs }, quasarAgent)
    javaAgents {
        quasar {
            jar = quasarAgent
            args = project.quasar.options.map { it.substring(1) }.get()
        }
    }
    mainClassName = "net.corda.osgi.framework.OSGiFrameworkMain"
}

